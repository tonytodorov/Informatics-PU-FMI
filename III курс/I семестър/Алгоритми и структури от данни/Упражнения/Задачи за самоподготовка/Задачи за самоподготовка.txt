// 1. Задача:

	static int Add(int[] arr)
        {
            int total = 0;
            for (int i = 0; i < arr.Length; ++i)
            {
                total += arr[i];
            }
            return total;
        }
 
        static void Main(string[] args)
        {
            int sizeArray;
            Console.Write("Input the size of Array : ");
            sizeArray = Convert.ToInt32(Console.ReadLine());
            if(0 <= n && n <= 20)
            {
                System.Environment.Exit(0);  
            }
            int[] numbers = new int[sizeArray];
            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write("Number {0} : ", (i + 1));
                numbers[i] = Convert.ToInt32(Console.ReadLine());
            }
            Console.WriteLine();
            Console.WriteLine("The Sum is :" + Add(numbers));
        }   

// 2. Задача:

	static void Main(string[] args)
        {
            int counter = 0, tempCounter = 1, foundNumber = 0;

            Console.Write("Enter array length: ");
            int length = Int32.Parse(Console.ReadLine());

            int[] arr = new int[length];

            for (int i = 0; i < length; i++)
            {
                Console.Write("Enter {0} element: ", i);
                if(10 <= n && n <= 99)
                {
                    arr[i] = Int32.Parse(Console.ReadLine());
                }
                else 
                    System.Environment.Exit(0);  
            }

            Array.Sort(arr);

            for (int i = 0; i < length - 1; i++)
            {
                if (arr[i] == arr[i + 1]) tempCounter++;
                else tempCounter = 1;
                if (tempCounter > counter)
                {
                    counter = tempCounter;
                    foundNumber = arr[i];
                }
            }

            Console.WriteLine("{0} was found {1} times.", foundNumber, counter);
        }

// 3. Задача:

     class MagicSquare
     {
      
        public int[,] squareMatrix;
        public byte size;
        public MagicSquare(byte lng)
        {
            if (lng > 25)
            {
                lng = 25;
            }
            else
            {
                this.size = lng;
                this.squareMatrix = new int[lng,lng];
            }            
        }

        // Метод за въвеждане на всички елементи на масива от потребител
        public void SetElements()
        {
            int newElement;
            Random random = new Random();
            for (int i = 0; i < this.size; i++)
            {
                for (int j = 0; j < this.size; j++)
                {
                    Console.Write("Enter element for row {0}, column {1} of the magic square: ",i+1,j+1);
                    try
                    {
                        newElement = int.Parse(Console.ReadLine());
                    }
                    catch (Exception e)
                    {
                        
                        newElement = random.Next(1, 20);
                    }
                    this.squareMatrix[i,j]= newElement;
                }
            }
        }

        // Отпечатване на елементите на квадрата в матричен вид
        public void PrintSquare()
        {
            Console.WriteLine("\n Square matrix:\n");
            for (int i = 0; i < this.size; i++)
            {
                for (int j = 0; j < this.size; j++)
                {
                    Console.Write("{0, 6} \t",this.squareMatrix[i,j]); 
                }
                Console.Write("\n");
            }
            
        }

        // Проверка дали дадения квадрат е магически
        public void CheckMagic()
        {
            int constSum = 0;
            int tempSum=0;

            // Проверка по редове
            for (int i = 0; i < this.size; i++)
            {
                tempSum = 0;
                for (int j = 0; j < this.size; j++)
                {
                    tempSum = tempSum + this.squareMatrix[i, j];
                }
                if (constSum == 0)
                {
                    constSum = tempSum;
                }
                if (constSum != tempSum)
                {
                    Console.WriteLine("\n This is not a magic square. \n");
                    return;
                }
            }

            //Проверка по колони
            for (int i = 0; i < this.size; i++)
            {
                tempSum = 0;
                for (int j = 0; j < this.size; j++)
                {
                    tempSum = tempSum + this.squareMatrix[j, i];
                }
                if (constSum == 0)
                {
                    constSum = tempSum;
                }
                if (constSum != tempSum)
                {
                    Console.WriteLine("\n This is not a magic square. \n");
                    return;
                }
            }

            // Проверка на главен диагонал
            tempSum = 0;
            for (int i = 0; i < this.size; i++)
            {
                tempSum += this.squareMatrix[i, i];
            }
            if (constSum == 0)
            {
                constSum = tempSum;
            }
            if (constSum != tempSum)
            {
                Console.WriteLine("\n This is not a magic square. \n");
                return;
            }

            // Проверка на обратен диагонал
            tempSum = 0;
            for (int i = 0; i < this.size; i++)
            {
                tempSum += this.squareMatrix[i, this.size - i-1];
            }
            if (constSum == 0)
            {
                constSum = tempSum;
            }
            if (constSum != tempSum)
            {
                Console.WriteLine("\n This is not a magic square. \n");
                return;
            }

            // Отпечатване на крайната сума
            Console.WriteLine("\n This is a magic square with magic sum of {0, 12}. \n",constSum);
            return;
        }

         static void Main(string[] args)
        {
            Console.Write("Enter matrix size: ");
            byte mySize;
            try
            {
                mySize = byte.Parse(Console.ReadLine());
            }
            catch (Exception)
            {
                Console.WriteLine("\n\n Invalid data.");
                mySize = 3;
            }
            if (mySize > 25)
            {
                mySize = 25;
                Console.WriteLine("\n\n You exceed the allowed limit of 25.");
            }
            if (mySize < 3)
            {
                mySize = 3;
                Console.WriteLine("\n\n The minimum to enter is 3.");
            }
            MagicSquare msq = new MagicSquare(mySize);
            msq.SetElements();
            msq.PrintSquare();
            msq.CheckMagic();
            Console.ReadKey(true);
    }
}


// 5. Задача:

  	static void Main(string[] args)
        {
            int n = Int32.Parse(Console.ReadLine());
            if(10 <= n && n <= 100010)
            {
                Console.Write(PrimeNumber(n));
            }
        }
        public static int PrimeNumber(int n)
        {
            for (int i = 2; i < n; i++)
            {
                if (n % i == 0) 
		{
		     n++; 
		     i = 2; 
		}
            }
            return n;
        }

// 6. Задача:

    static int SumOfDigit(int n)
    {
        if (n == 0)
	{
             return 0;
	}
    	return(n % 10 + SumOfDigit(n / 10));
    }

    public static void Main()
    {
        int n = Int32.Parse(Console.ReadLine());
        if(10 <= n && n <= 10010)
        {
            int result = SumOfDigit(n);
            Console.Write("Sum = " + result);
        }
    }   