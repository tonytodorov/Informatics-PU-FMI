  
using System;
using System.Drawing;

namespace Draw
{
    /// <summary>
    /// Класът кръг е основен примитив, който е наследник на базовия Shape.
    /// </summary>
    [Serializable]
    public class CircleShape : Shape
    {
        #region Constructor

        public CircleShape(RectangleF rect) : base(rect)
        {
        }

        public CircleShape(RectangleShape rectangle) : base(rectangle)
        {
        }

        #endregion

        /// <summary>
        /// Проверка за принадлежност на точка point към кръга.
        /// </summary>
        public override bool Contains(PointF point)
        {
            float radius = Math.Min(Rectangle.Width, Rectangle.Height) / 2;
            float centerX = Rectangle.X + Rectangle.Width / 2;
            float centerY = Rectangle.Y + Rectangle.Height / 2;

            float distanceX = Math.Abs(point.X - centerX);
            float distanceY = Math.Abs(point.Y - centerY);

            if (distanceX > radius || distanceY > radius)
                return false;

            float distanceSquared = distanceX * distanceX + distanceY * distanceY;
            return distanceSquared <= radius * radius;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);

            FillColor = Color.FromArgb(Opacity, FillColor);

            float radius = Math.Min(Rectangle.Width, Rectangle.Height) / 2;
            float centerX = Rectangle.X + Rectangle.Width / 2;
            float centerY = Rectangle.Y + Rectangle.Height / 2;

            grfx.FillEllipse(new SolidBrush(FillColor), centerX - radius, centerY - radius, radius * 2, radius * 2);
            grfx.DrawEllipse(new Pen(StrokeColor, StrokeWidth), centerX - radius, centerY - radius, radius * 2, radius * 2);
        }
    }
}





using System;
using System.Drawing;

namespace Draw
{
    /// <summary>
    /// Класът отсечка е основен примитив, който е наследник на базовия Shape.
    /// </summary>
    [Serializable]
    public class LineShape : Shape
    {
        #region Properties

        public PointF StartPoint { get; set; }
        public PointF EndPoint { get; set; }

        #endregion

        #region Constructor

        public LineShape(PointF startPoint, PointF endPoint)
        {
            StartPoint = startPoint;
            EndPoint = endPoint;
        }

        #endregion

        /// <summary>
        /// Проверка за принадлежност на точка point към отсечката.
        /// </summary>
        public override bool Contains(PointF point)
        {
            const float tolerance = 2f;

            float minX = Math.Min(StartPoint.X, EndPoint.X) - tolerance;
            float maxX = Math.Max(StartPoint.X, EndPoint.X) + tolerance;
            float minY = Math.Min(StartPoint.Y, EndPoint.Y) - tolerance;
            float maxY = Math.Max(StartPoint.Y, EndPoint.Y) + tolerance;

            if (point.X < minX || point.X > maxX || point.Y < minY || point.Y > maxY)
                return false;

            float dx = EndPoint.X - StartPoint.X;
            float dy = EndPoint.Y - StartPoint.Y;
            float distance = Math.Abs(dy * point.X - dx * point.Y + EndPoint.X * StartPoint.Y - EndPoint.Y * StartPoint.X) / (float)Math.Sqrt(dx * dx + dy * dy);

            return distance <= tolerance;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);

            grfx.DrawLine(new Pen(StrokeColor, StrokeWidth), StartPoint, EndPoint);
        }
    }
}



public void AddRandomCircle()
        {
            Random rnd = new Random();
            int x = rnd.Next(100, 1000);
            int y = rnd.Next(100, 600);
            int radius = 50; // Радиусът на кръга

            CircleShape circle = new CircleShape(new Rectangle(x, y, 100, 100));
            circle.FillColor = Color.White;
            ShapeList.Add(circle);

            // Добавяне на отсечките
            float centerX = x + radius;
            float centerY = y + radius;

            // Вертикална отсечка посредата
            float middlePointX = centerX;
            float startPointY = centerY - radius;
            float endPointY = centerY + radius;

            LineShape verticalLine = new LineShape(new PointF(middlePointX, startPointY), new PointF(middlePointX, endPointY));
            verticalLine.StrokeColor = Color.Black;
            ShapeList.Add(verticalLine);

            // Хоризонтални отсечки
            float horizontalDistance = radius * (float)Math.Cos(Math.PI / 4); // Разстояние от центъра до хоризонталните отсечки

            // Първа хоризонтална отсечка
            float startPointX = centerX - horizontalDistance;
            float endPointX = centerX + horizontalDistance;
            float horizontalLineY = centerY;

            LineShape horizontalLine1 = new LineShape(new PointF(startPointX, horizontalLineY), new PointF(endPointX, horizontalLineY));
            horizontalLine1.StrokeColor = Color.Black;
            ShapeList.Add(horizontalLine1);

            // Втора хоризонтална отсечка
            horizontalLineY = centerY - horizontalDistance;

            LineShape horizontalLine2 = new LineShape(new PointF(startPointX, horizontalLineY), new PointF(endPointX, horizontalLineY));
            horizontalLine2.StrokeColor = Color.Black;
            ShapeList.Add(horizontalLine2);

            // Трета хоризонтална отсечка
            horizontalLineY = centerY + horizontalDistance;

            LineShape horizontalLine3 = new LineShape(new PointF(startPointX, horizontalLineY), new PointF(endPointX, horizontalLineY));
            horizontalLine3.StrokeColor = Color.Black;
            ShapeList.Add(horizontalLine3);

        }