using System;
using System.Drawing;

namespace Draw
{
    /// <summary>
    /// Класът правоъгълник е основен примитив, който е наследник на базовия Shape.
    /// </summary>
    [Serializable]
    public class RectangleShape : Shape
    {
        #region Constructor

        public RectangleShape(RectangleF rect) : base(rect)
        {
        }

        public RectangleShape(RectangleShape rectangle) : base(rectangle)
        {
        }

        #endregion

        /// <summary>
        /// Проверка за принадлежност на точка point към правоъгълника.
        /// В случая на правоъгълник този метод може да не бъде пренаписван, защото
        /// Реализацията съвпада с тази на абстрактния клас Shape, който проверява
        /// дали точката е в обхващащия правоъгълник на елемента (а той съвпада с
        /// елемента в този случай).
        /// </summary>
        public override bool Contains(PointF point)
        {
            if (base.Contains(point))
                // Проверка дали е в обекта само, ако точката е в обхващащия правоъгълник.
                // В случая на правоъгълник - директно връщаме true
                return true;
            else
                // Ако не е в обхващащия правоъгълник, то неможе да е в обекта и => false
                return false;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);

            FillColor = Color.FromArgb(Opacity, FillColor);
            grfx.FillRectangle(new SolidBrush(FillColor), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);
            grfx.DrawRectangle(new Pen(StrokeColor), Rectangle.X, Rectangle.Y, Rectangle.Width, Rectangle.Height);

        }
    }
}







using System;
using System.Drawing;

namespace Draw
{
    /// <summary>
    /// Класът отсечка е основен примитив, който е наследник на базовия Shape.
    /// </summary>
    [Serializable]
    public class LineShape : Shape
    {
        #region Properties

        public PointF StartPoint { get; set; }
        public PointF EndPoint { get; set; }

        #endregion

        #region Constructor

        public LineShape(PointF startPoint, PointF endPoint)
        {
            StartPoint = startPoint;
            EndPoint = endPoint;
        }

        #endregion

        /// <summary>
        /// Проверка за принадлежност на точка point към отсечката.
        /// </summary>
        public override bool Contains(PointF point)
        {
            const float tolerance = 2f;

            float minX = Math.Min(StartPoint.X, EndPoint.X) - tolerance;
            float maxX = Math.Max(StartPoint.X, EndPoint.X) + tolerance;
            float minY = Math.Min(StartPoint.Y, EndPoint.Y) - tolerance;
            float maxY = Math.Max(StartPoint.Y, EndPoint.Y) + tolerance;

            if (point.X < minX || point.X > maxX || point.Y < minY || point.Y > maxY)
                return false;

            float dx = EndPoint.X - StartPoint.X;
            float dy = EndPoint.Y - StartPoint.Y;
            float distance = Math.Abs(dy * point.X - dx * point.Y + EndPoint.X * StartPoint.Y - EndPoint.Y * StartPoint.X) / (float)Math.Sqrt(dx * dx + dy * dy);

            return distance <= tolerance;
        }

        /// <summary>
        /// Частта, визуализираща конкретния примитив.
        /// </summary>
        public override void DrawSelf(Graphics grfx)
        {
            base.DrawSelf(grfx);

            grfx.DrawLine(new Pen(StrokeColor, StrokeWidth), StartPoint, EndPoint);
        }
    }
}




public void AddRandomRectangle()
        {
            Random rnd = new Random();
            int x = rnd.Next(100, 1000);
            int y = rnd.Next(100, 600);
            int width = 200; // Ширина на правоъгълника
            int height = 100; // Височина на правоъгълника

            RectangleShape rectangle = new RectangleShape(new Rectangle(x, y, width, height));
            rectangle.FillColor = Color.White;
            ShapeList.Add(rectangle);

            // Добавяне на отсечките
            LineShape line1 = new LineShape(new PointF(x, y), new PointF(x + width, y + height));
            line1.StrokeColor = Color.Black;
            ShapeList.Add(line1);

            LineShape line2 = new LineShape(new PointF(x, y + height), new PointF(x + width, y));
            line2.StrokeColor = Color.Black;
            ShapeList.Add(line2);

        }






